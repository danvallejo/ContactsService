#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.8009
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Contacts.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Contacts")]
	public partial class ContactsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContactPhone(ContactPhone instance);
    partial void UpdateContactPhone(ContactPhone instance);
    partial void DeleteContactPhone(ContactPhone instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertPhoneType(PhoneType instance);
    partial void UpdatePhoneType(PhoneType instance);
    partial void DeletePhoneType(PhoneType instance);
    #endregion
		
		public ContactsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContactsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ContactPhone> ContactPhones
		{
			get
			{
				return this.GetTable<ContactPhone>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts1
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<PhoneType> PhoneTypes
		{
			get
			{
				return this.GetTable<PhoneType>();
			}
		}
		
		[Function(Name="dbo.GetAllContacts")]
		public ISingleResult<GetAllContactsResult> GetAllContacts()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetAllContactsResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.ContactPhones")]
	[DataContract()]
	public partial class ContactPhone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhoneId;
		
		private int _ContactId;
		
		private string _PhoneNumber;
		
		private int _PhoneTypeId;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<PhoneType> _PhoneType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneIdChanging(int value);
    partial void OnPhoneIdChanged();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneTypeIdChanging(int value);
    partial void OnPhoneTypeIdChanged();
    #endregion
		
		public ContactPhone()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PhoneId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PhoneId
		{
			get
			{
				return this._PhoneId;
			}
			set
			{
				if ((this._PhoneId != value))
				{
					this.OnPhoneIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneId = value;
					this.SendPropertyChanged("PhoneId");
					this.OnPhoneIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContactId", DbType="Int NOT NULL")]
		[DataMember(Order=2)]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneTypeId", DbType="Int NOT NULL")]
		[DataMember(Order=4)]
		public int PhoneTypeId
		{
			get
			{
				return this._PhoneTypeId;
			}
			set
			{
				if ((this._PhoneTypeId != value))
				{
					if (this._PhoneType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhoneTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeId = value;
					this.SendPropertyChanged("PhoneTypeId");
					this.OnPhoneTypeIdChanged();
				}
			}
		}
		
		[Association(Name="FK_ContactPhones_Contacts", Storage="_Contact", ThisKey="ContactId", OtherKey="ContactId", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.ContactPhones.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.ContactPhones.Add(this);
						this._ContactId = value.ContactId;
					}
					else
					{
						this._ContactId = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		[Association(Name="FK_ContactPhones_PhoneTypes", Storage="_PhoneType", ThisKey="PhoneTypeId", OtherKey="PhoneTypeId", IsForeignKey=true)]
		public PhoneType PhoneType
		{
			get
			{
				return this._PhoneType.Entity;
			}
			set
			{
				PhoneType previousValue = this._PhoneType.Entity;
				if (((previousValue != value) 
							|| (this._PhoneType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PhoneType.Entity = null;
						previousValue.ContactPhones.Remove(this);
					}
					this._PhoneType.Entity = value;
					if ((value != null))
					{
						value.ContactPhones.Add(this);
						this._PhoneTypeId = value.PhoneTypeId;
					}
					else
					{
						this._PhoneTypeId = default(int);
					}
					this.SendPropertyChanged("PhoneType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Contact = default(EntityRef<Contact>);
			this._PhoneType = default(EntityRef<PhoneType>);
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[Table(Name="dbo.Contacts")]
	[DataContract()]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactId;
		
		private string _ContactName;
		
		private System.DateTime _ContactDateAdded;
		
		private EntitySet<ContactPhone> _ContactPhones;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnContactDateAddedChanging(System.DateTime value);
    partial void OnContactDateAddedChanged();
    #endregion
		
		public Contact()
		{
			this.Initialize();
		}
		
		[Column(Storage="_ContactId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContactDateAdded", DbType="SmallDateTime NOT NULL")]
		[DataMember(Order=3)]
		public System.DateTime ContactDateAdded
		{
			get
			{
				return this._ContactDateAdded;
			}
			set
			{
				if ((this._ContactDateAdded != value))
				{
					this.OnContactDateAddedChanging(value);
					this.SendPropertyChanging();
					this._ContactDateAdded = value;
					this.SendPropertyChanged("ContactDateAdded");
					this.OnContactDateAddedChanged();
				}
			}
		}
		
		[Association(Name="FK_ContactPhones_Contacts", Storage="_ContactPhones", ThisKey="ContactId", OtherKey="ContactId", DeleteRule="NO ACTION")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<ContactPhone> ContactPhones
		{
			get
			{
				if ((this.serializing 
							&& (this._ContactPhones.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ContactPhones;
			}
			set
			{
				this._ContactPhones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactPhones(ContactPhone entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_ContactPhones(ContactPhone entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void Initialize()
		{
			this._ContactPhones = new EntitySet<ContactPhone>(new Action<ContactPhone>(this.attach_ContactPhones), new Action<ContactPhone>(this.detach_ContactPhones));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[Table(Name="dbo.PhoneTypes")]
	[DataContract()]
	public partial class PhoneType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PhoneTypeId;
		
		private string _PhoneTypeCode;
		
		private string _PhoneTypeName;
		
		private EntitySet<ContactPhone> _ContactPhones;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhoneTypeIdChanging(int value);
    partial void OnPhoneTypeIdChanged();
    partial void OnPhoneTypeCodeChanging(string value);
    partial void OnPhoneTypeCodeChanged();
    partial void OnPhoneTypeNameChanging(string value);
    partial void OnPhoneTypeNameChanged();
    #endregion
		
		public PhoneType()
		{
			this.Initialize();
		}
		
		[Column(Storage="_PhoneTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[DataMember(Order=1)]
		public int PhoneTypeId
		{
			get
			{
				return this._PhoneTypeId;
			}
			set
			{
				if ((this._PhoneTypeId != value))
				{
					this.OnPhoneTypeIdChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeId = value;
					this.SendPropertyChanged("PhoneTypeId");
					this.OnPhoneTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneTypeCode", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[DataMember(Order=2)]
		public string PhoneTypeCode
		{
			get
			{
				return this._PhoneTypeCode;
			}
			set
			{
				if ((this._PhoneTypeCode != value))
				{
					this.OnPhoneTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeCode = value;
					this.SendPropertyChanged("PhoneTypeCode");
					this.OnPhoneTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[DataMember(Order=3)]
		public string PhoneTypeName
		{
			get
			{
				return this._PhoneTypeName;
			}
			set
			{
				if ((this._PhoneTypeName != value))
				{
					this.OnPhoneTypeNameChanging(value);
					this.SendPropertyChanging();
					this._PhoneTypeName = value;
					this.SendPropertyChanged("PhoneTypeName");
					this.OnPhoneTypeNameChanged();
				}
			}
		}
		
		[Association(Name="FK_ContactPhones_PhoneTypes", Storage="_ContactPhones", ThisKey="PhoneTypeId", OtherKey="PhoneTypeId", DeleteRule="NO ACTION")]
		[DataMember(Order=4, EmitDefaultValue=false)]
		public EntitySet<ContactPhone> ContactPhones
		{
			get
			{
				if ((this.serializing 
							&& (this._ContactPhones.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ContactPhones;
			}
			set
			{
				this._ContactPhones.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactPhones(ContactPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = this;
		}
		
		private void detach_ContactPhones(ContactPhone entity)
		{
			this.SendPropertyChanging();
			entity.PhoneType = null;
		}
		
		private void Initialize()
		{
			this._ContactPhones = new EntitySet<ContactPhone>(new Action<ContactPhone>(this.attach_ContactPhones), new Action<ContactPhone>(this.detach_ContactPhones));
			OnCreated();
		}
		
		[OnDeserializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[OnSerializing()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[OnSerialized()]
		[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[DataContract()]
	public partial class GetAllContactsResult
	{
		
		private System.Nullable<int> _ContactId;
		
		private string _ContactName;
		
		private System.Nullable<System.DateTime> _ContactDateAdded;
		
		public GetAllContactsResult()
		{
		}
		
		[Column(Storage="_ContactId", DbType="Int")]
		[DataMember(Order=1)]
		public System.Nullable<int> ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					this._ContactId = value;
				}
			}
		}
		
		[Column(Storage="_ContactName", DbType="VarChar(50)")]
		[DataMember(Order=2)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this._ContactName = value;
				}
			}
		}
		
		[Column(Storage="_ContactDateAdded", DbType="SmallDateTime")]
		[DataMember(Order=3)]
		public System.Nullable<System.DateTime> ContactDateAdded
		{
			get
			{
				return this._ContactDateAdded;
			}
			set
			{
				if ((this._ContactDateAdded != value))
				{
					this._ContactDateAdded = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
